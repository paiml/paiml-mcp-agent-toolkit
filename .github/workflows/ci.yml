name: CI

# ‚ö†Ô∏è IMPORTANT: This project uses a Cargo workspace structure.
# All commands MUST be run from the repository root using the root Makefile.
# DO NOT use 'cd server && make ...' patterns - use 'make server-...' instead.
# See .github/CONTRIBUTING.md for details.

# This workflow is now orchestrated by main.yml
# To run manually, use workflow_dispatch
on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_MIN_STACK: 8388608

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Install cargo-nextest
        uses: taiki-e/install-action@cargo-nextest
      
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: server/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run CI pipeline (without Docker)
        run: |
          make server-format
          make server-lint
          make server-check
          make release
          make test-fast  # Fast tests with nextest for better CI performance
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: pmat-linux
          path: target/release/pmat
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: server/coverage/
        if: always()

  documentation-sync:
    name: Documentation Sync Tests
    runs-on: ubuntu-22.04
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-nextest
        uses: taiki-e/install-action@cargo-nextest
      
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: pmat-linux
          path: server/target/release/
      
      - name: Make binary executable
        run: chmod +x server/target/release/pmat
      
      - name: Run documentation sync tests
        run: |
          echo "üìö Running documentation synchronization tests..."
          cd server
          cargo nextest run --test cli_documentation_sync || cargo test --test cli_documentation_sync
          cargo nextest run --test mcp_documentation_sync || cargo test --test mcp_documentation_sync
          cargo nextest run --test documentation_examples || cargo test --test documentation_examples
      
      - name: Verify all documentation tests pass
        run: |
          cd server
          (cargo nextest run doc_sync || cargo test doc_sync) 2>&1 | tee doc_sync_results.txt
          if grep -q "test result: FAILED" doc_sync_results.txt; then
            echo "‚ùå Documentation is out of sync with implementation!"
            echo "Please update docs/cli-mcp.md to match the current implementation"
            exit 1
          else
            echo "‚úÖ Documentation is in sync with implementation"
          fi

  dogfooding:
    name: Dogfooding - Test Our Own Tools
    runs-on: ubuntu-22.04
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Deno for dogfooding script
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: pmat-linux
          path: server/target/release/
      
      - name: Make binary executable
        run: chmod +x server/target/release/pmat
      
      - name: Dogfood - Use our own tools for CI metrics
        run: |
          echo "üêï Running dogfooding: Using our own MCP toolkit to analyze our codebase"
          make dogfood-ci
      
      - name: Upload dogfooding metrics
        uses: actions/upload-artifact@v4
        with:
          name: dogfooding-metrics
          path: artifacts/dogfooding/
        if: always()
      
      - name: Display metrics summary
        run: |
          echo "üìä Dogfooding Results:"
          echo "====================="
          if [ -f artifacts/dogfooding/complexity-latest.txt ]; then
            echo "üîç Complexity Analysis:"
            head -20 artifacts/dogfooding/complexity-latest.txt
          fi
          echo ""
          if [ -f artifacts/dogfooding/churn-latest.txt ]; then
            echo "üîÑ Code Churn (Last 7 Days):"
            head -10 artifacts/dogfooding/churn-latest.txt
          fi
          echo ""
          if [ -f artifacts/dogfooding/dag-latest.mmd ]; then
            echo "üîÄ Dependency Graph Generated:"
            wc -l artifacts/dogfooding/dag-latest.mmd
          fi
        if: always()

  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      
      - name: Run security audit via Makefile
        run: |
          make server-audit