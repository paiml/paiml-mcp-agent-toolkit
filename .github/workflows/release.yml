name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: paiml-mcp-agent-toolkit
            asset_name: paiml-mcp-agent-toolkit-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: paiml-mcp-agent-toolkit
            asset_name: paiml-mcp-agent-toolkit-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: paiml-mcp-agent-toolkit
            asset_name: paiml-mcp-agent-toolkit-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: paiml-mcp-agent-toolkit.exe
            asset_name: paiml-mcp-agent-toolkit-windows-amd64.exe
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build
        run: |
          cd server
          cargo build --release --target ${{ matrix.target }} --bin paiml-mcp-agent-toolkit
      
      - name: Compress binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd server/target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          mv ${{ matrix.asset_name }}.tar.gz ../../../../
      
      - name: Compress binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd server/target/${{ matrix.target }}/release
          7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
          mv ${{ matrix.asset_name }}.zip ../../../../
        shell: bash
      
      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip
