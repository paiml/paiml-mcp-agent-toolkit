#[cfg(test)]
#[cfg(feature = "installer-gen")]
mod installer_macro_integration_tests {
    use crate::installer::{
        install_paiml_mcp_agent_toolkit, INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL,
    };

    #[test]
    fn test_generated_shell_constant_exists() {
        // Verify the macro generated a shell script constant
        // The generated constant is never empty, so we just check it starts correctly
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.starts_with("#!/bin/sh"));
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.contains("set -euf"));
    }

    #[test]
    fn test_macro_generates_valid_shell() {
        // The macro successfully generates a shell script from the AST
        // This test verifies the fix for the compilation error

        // Check that the script has proper POSIX shell structure
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.starts_with("#!/bin/sh"));
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL
            .contains("# Generated by paiml-mcp-agent-toolkit"));
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.contains("set -euf"));

        // The generated script should have a main function
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.contains("main() {"));
        assert!(INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.contains("main \"$@\""));
    }

    #[test]
    fn test_installer_function_compiles() {
        // Test that the installer function with the macro attribute compiles successfully
        use crate::installer::ShellContext;

        let _ctx = ShellContext;
        let _args: Vec<String> = vec![];

        // We can't actually run the installer in tests, but we can verify it compiles
        let _ = |ctx: &ShellContext, args: &[String]| -> Result<(), crate::installer::Error> {
            install_paiml_mcp_agent_toolkit(ctx, args)
        };
    }

    #[test]
    fn test_generated_shell_has_deterministic_hash() {
        // Verify that the generated shell includes a SHA256 hash for determinism
        let lines: Vec<&str> = INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.lines().collect();

        let has_sha_comment = lines.iter().any(|line| line.starts_with("# SHA256:"));

        assert!(
            has_sha_comment,
            "Generated shell should include SHA256 hash"
        );
    }

    #[test]
    fn test_no_dangerous_patterns() {
        // Ensure the generated shell doesn't contain dangerous patterns
        assert!(!INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.contains("eval"));
        assert!(!INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.contains("source"));

        // Check that any dots are not used for sourcing
        for line in INSTALL_PAIML_MCP_AGENT_TOOLKIT_SHELL.lines() {
            if !line.trim().starts_with('#') && line.contains('.') {
                // Make sure it's not a sourcing command
                assert!(
                    !line.trim().starts_with(". "),
                    "Found potential sourcing command"
                );
            }
        }
    }
}
